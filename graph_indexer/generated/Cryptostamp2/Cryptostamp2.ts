// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AchievementsContractSet extends ethereum.Event {
  get params(): AchievementsContractSet__Params {
    return new AchievementsContractSet__Params(this);
  }
}

export class AchievementsContractSet__Params {
  _event: AchievementsContractSet;

  constructor(event: AchievementsContractSet) {
    this._event = event;
  }

  get achievementsContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURI extends ethereum.Event {
  get params(): BaseURI__Params {
    return new BaseURI__Params(this);
  }
}

export class BaseURI__Params {
  _event: BaseURI;

  constructor(event: BaseURI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CreateControlTransferred extends ethereum.Event {
  get params(): CreateControlTransferred__Params {
    return new CreateControlTransferred__Params(this);
  }
}

export class CreateControlTransferred__Params {
  _event: CreateControlTransferred;

  constructor(event: CreateControlTransferred) {
    this._event = event;
  }

  get previousCreateControl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCreateControl(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DataRootSet extends ethereum.Event {
  get params(): DataRootSet__Params {
    return new DataRootSet__Params(this);
  }
}

export class DataRootSet__Params {
  _event: DataRootSet;

  constructor(event: DataRootSet) {
    this._event = event;
  }

  get dataRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class MintedWithProof extends ethereum.Event {
  get params(): MintedWithProof__Params {
    return new MintedWithProof__Params(this);
  }
}

export class MintedWithProof__Params {
  _event: MintedWithProof;

  constructor(event: MintedWithProof) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get aType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get color(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class PublicMintingDisabled extends ethereum.Event {
  get params(): PublicMintingDisabled__Params {
    return new PublicMintingDisabled__Params(this);
  }
}

export class PublicMintingDisabled__Params {
  _event: PublicMintingDisabled;

  constructor(event: PublicMintingDisabled) {
    this._event = event;
  }
}

export class PublicMintingEnabled extends ethereum.Event {
  get params(): PublicMintingEnabled__Params {
    return new PublicMintingEnabled__Params(this);
  }
}

export class PublicMintingEnabled__Params {
  _event: PublicMintingEnabled;

  constructor(event: PublicMintingEnabled) {
    this._event = event;
  }
}

export class SeenCS2ColorChanged extends ethereum.Event {
  get params(): SeenCS2ColorChanged__Params {
    return new SeenCS2ColorChanged__Params(this);
  }
}

export class SeenCS2ColorChanged__Params {
  _event: SeenCS2ColorChanged;

  constructor(event: SeenCS2ColorChanged) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get previousColor(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get newColor(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class SignedTransfer extends ethereum.Event {
  get params(): SignedTransfer__Params {
    return new SignedTransfer__Params(this);
  }
}

export class SignedTransfer__Params {
  _event: SignedTransfer;

  constructor(event: SignedTransfer) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get signedTransferNonce(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StampUpgraded extends ethereum.Event {
  get params(): StampUpgraded__Params {
    return new StampUpgraded__Params(this);
  }
}

export class StampUpgraded__Params {
  _event: StampUpgraded;

  constructor(event: StampUpgraded) {
    this._event = event;
  }

  get changedTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get previousColor(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get newColor(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get withJoker(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get usedTokedId1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get usedTokenId2(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TokenAssignmentControlTransferred extends ethereum.Event {
  get params(): TokenAssignmentControlTransferred__Params {
    return new TokenAssignmentControlTransferred__Params(this);
  }
}

export class TokenAssignmentControlTransferred__Params {
  _event: TokenAssignmentControlTransferred;

  constructor(event: TokenAssignmentControlTransferred) {
    this._event = event;
  }

  get previousTokenAssignmentControl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTokenAssignmentControl(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpgradeMaximumChanged extends ethereum.Event {
  get params(): UpgradeMaximumChanged__Params {
    return new UpgradeMaximumChanged__Params(this);
  }
}

export class UpgradeMaximumChanged__Params {
  _event: UpgradeMaximumChanged;

  constructor(event: UpgradeMaximumChanged) {
    this._event = event;
  }

  get previousUpgradeMaximum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newUpgradeMaximum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Cryptostamp2__getDataFieldsFromProofResult {
  value0: BigInt;
  value1: Address;
  value2: i32;
  value3: i32;

  constructor(value0: BigInt, value1: Address, value2: i32, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }
}

export class Cryptostamp2 extends ethereum.SmartContract {
  static bind(address: Address): Cryptostamp2 {
    return new Cryptostamp2("Cryptostamp2", address);
  }

  CS1Address(): Address {
    let result = super.call("CS1Address", "CS1Address():(address)", []);

    return result[0].toAddress();
  }

  try_CS1Address(): ethereum.CallResult<Address> {
    let result = super.tryCall("CS1Address", "CS1Address():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CS1ColorsAddress(): Address {
    let result = super.call(
      "CS1ColorsAddress",
      "CS1ColorsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_CS1ColorsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "CS1ColorsAddress",
      "CS1ColorsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  achievementsContract(): Address {
    let result = super.call(
      "achievementsContract",
      "achievementsContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_achievementsContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "achievementsContract",
      "achievementsContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowPublicMinting(): boolean {
    let result = super.call(
      "allowPublicMinting",
      "allowPublicMinting():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_allowPublicMinting(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowPublicMinting",
      "allowPublicMinting():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  colorSupply(_color: i32): BigInt {
    let result = super.call("colorSupply", "colorSupply(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_color))
    ]);

    return result[0].toBigInt();
  }

  try_colorSupply(_color: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("colorSupply", "colorSupply(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_color))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createControl(): Address {
    let result = super.call("createControl", "createControl():(address)", []);

    return result[0].toAddress();
  }

  try_createControl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createControl",
      "createControl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createWithProof(tokenData: Bytes, merkleProof: Array<Bytes>): BigInt {
    let result = super.call(
      "createWithProof",
      "createWithProof(bytes32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toBigInt();
  }

  try_createWithProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createWithProof",
      "createWithProof(bytes32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dataRoot(): Bytes {
    let result = super.call("dataRoot", "dataRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_dataRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("dataRoot", "dataRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exists(tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getColor(tokenId: BigInt): i32 {
    let result = super.call("getColor", "getColor(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toI32();
  }

  try_getColor(tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getColor", "getColor(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getColorFromProof(tokenData: Bytes, merkleProof: Array<Bytes>): i32 {
    let result = super.call(
      "getColorFromProof",
      "getColorFromProof(bytes32,bytes32[]):(uint8)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toI32();
  }

  try_getColorFromProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getColorFromProof",
      "getColorFromProof(bytes32,bytes32[]):(uint8)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDataFieldsFromProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): Cryptostamp2__getDataFieldsFromProofResult {
    let result = super.call(
      "getDataFieldsFromProof",
      "getDataFieldsFromProof(bytes32,bytes32[]):(uint256,address,uint8,uint8)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return new Cryptostamp2__getDataFieldsFromProofResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toI32()
    );
  }

  try_getDataFieldsFromProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<Cryptostamp2__getDataFieldsFromProofResult> {
    let result = super.tryCall(
      "getDataFieldsFromProof",
      "getDataFieldsFromProof(bytes32,bytes32[]):(uint256,address,uint8,uint8)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cryptostamp2__getDataFieldsFromProofResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toI32()
      )
    );
  }

  getOwnerFromProof(tokenData: Bytes, merkleProof: Array<Bytes>): Address {
    let result = super.call(
      "getOwnerFromProof",
      "getOwnerFromProof(bytes32,bytes32[]):(address)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toAddress();
  }

  try_getOwnerFromProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwnerFromProof",
      "getOwnerFromProof(bytes32,bytes32[]):(address)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenIdFromProof(tokenData: Bytes, merkleProof: Array<Bytes>): BigInt {
    let result = super.call(
      "getTokenIdFromProof",
      "getTokenIdFromProof(bytes32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenIdFromProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenIdFromProof",
      "getTokenIdFromProof(bytes32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getType(tokenId: BigInt): i32 {
    let result = super.call("getType", "getType(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toI32();
  }

  try_getType(tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getType", "getType(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTypeFromProof(tokenData: Bytes, merkleProof: Array<Bytes>): i32 {
    let result = super.call(
      "getTypeFromProof",
      "getTypeFromProof(bytes32,bytes32[]):(uint8)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toI32();
  }

  try_getTypeFromProof(
    tokenData: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTypeFromProof",
      "getTypeFromProof(bytes32,bytes32[]):(uint8)",
      [
        ethereum.Value.fromFixedBytes(tokenData),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintedSupply(): BigInt {
    let result = super.call("mintedSupply", "mintedSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintedSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintedSupply", "mintedSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintingFinished(): boolean {
    let result = super.call("mintingFinished", "mintingFinished():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintingFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintingFinished",
      "mintingFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publicMintingAllowed(): boolean {
    let result = super.call(
      "publicMintingAllowed",
      "publicMintingAllowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_publicMintingAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "publicMintingAllowed",
      "publicMintingAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  signedTransferNonce(param0: Address): BigInt {
    let result = super.call(
      "signedTransferNonce",
      "signedTransferNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_signedTransferNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signedTransferNonce",
      "signedTransferNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAssignmentControl(): Address {
    let result = super.call(
      "tokenAssignmentControl",
      "tokenAssignmentControl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenAssignmentControl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAssignmentControl",
      "tokenAssignmentControl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  typeColorSupply(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "typeColorSupply",
      "typeColorSupply(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_typeColorSupply(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "typeColorSupply",
      "typeColorSupply(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  typeSupply(_type: i32): BigInt {
    let result = super.call("typeSupply", "typeSupply(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_type))
    ]);

    return result[0].toBigInt();
  }

  try_typeSupply(_type: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("typeSupply", "typeSupply(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_type))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradeMaximum(): BigInt {
    let result = super.call("upgradeMaximum", "upgradeMaximum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_upgradeMaximum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "upgradeMaximum",
      "upgradeMaximum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradesAllowed(): boolean {
    let result = super.call("upgradesAllowed", "upgradesAllowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_upgradesAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "upgradesAllowed",
      "upgradesAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  upgradesDone(): BigInt {
    let result = super.call("upgradesDone", "upgradesDone():(uint256)", []);

    return result[0].toBigInt();
  }

  try_upgradesDone(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("upgradesDone", "upgradesDone():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usedInUpgrade(param0: BigInt): boolean {
    let result = super.call("usedInUpgrade", "usedInUpgrade(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_usedInUpgrade(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "usedInUpgrade",
      "usedInUpgrade(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  usedInUpgradeCS1(param0: BigInt): boolean {
    let result = super.call(
      "usedInUpgradeCS1",
      "usedInUpgradeCS1(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_usedInUpgradeCS1(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "usedInUpgradeCS1",
      "usedInUpgradeCS1(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _createControl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAssignmentControl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _CS1Address(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _CS1ColorsAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _finalSupply(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _upgradeMaximum(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ApproveNFTrescueCall extends ethereum.Call {
  get inputs(): ApproveNFTrescueCall__Inputs {
    return new ApproveNFTrescueCall__Inputs(this);
  }

  get outputs(): ApproveNFTrescueCall__Outputs {
    return new ApproveNFTrescueCall__Outputs(this);
  }
}

export class ApproveNFTrescueCall__Inputs {
  _call: ApproveNFTrescueCall;

  constructor(call: ApproveNFTrescueCall) {
    this._call = call;
  }

  get _foreignNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApproveNFTrescueCall__Outputs {
  _call: ApproveNFTrescueCall;

  constructor(call: ApproveNFTrescueCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _type(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _color(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class CreateMultiCall extends ethereum.Call {
  get inputs(): CreateMultiCall__Inputs {
    return new CreateMultiCall__Inputs(this);
  }

  get outputs(): CreateMultiCall__Outputs {
    return new CreateMultiCall__Outputs(this);
  }
}

export class CreateMultiCall__Inputs {
  _call: CreateMultiCall;

  constructor(call: CreateMultiCall) {
    this._call = call;
  }

  get _tokenIdStart(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _types(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get _colors(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }
}

export class CreateMultiCall__Outputs {
  _call: CreateMultiCall;

  constructor(call: CreateMultiCall) {
    this._call = call;
  }
}

export class CreateWithProofCall extends ethereum.Call {
  get inputs(): CreateWithProofCall__Inputs {
    return new CreateWithProofCall__Inputs(this);
  }

  get outputs(): CreateWithProofCall__Outputs {
    return new CreateWithProofCall__Outputs(this);
  }
}

export class CreateWithProofCall__Inputs {
  _call: CreateWithProofCall;

  constructor(call: CreateWithProofCall) {
    this._call = call;
  }

  get tokenData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class CreateWithProofCall__Outputs {
  _call: CreateWithProofCall;

  constructor(call: CreateWithProofCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisablePublicMintingCall extends ethereum.Call {
  get inputs(): DisablePublicMintingCall__Inputs {
    return new DisablePublicMintingCall__Inputs(this);
  }

  get outputs(): DisablePublicMintingCall__Outputs {
    return new DisablePublicMintingCall__Outputs(this);
  }
}

export class DisablePublicMintingCall__Inputs {
  _call: DisablePublicMintingCall;

  constructor(call: DisablePublicMintingCall) {
    this._call = call;
  }
}

export class DisablePublicMintingCall__Outputs {
  _call: DisablePublicMintingCall;

  constructor(call: DisablePublicMintingCall) {
    this._call = call;
  }
}

export class EnablePublicMintingCall extends ethereum.Call {
  get inputs(): EnablePublicMintingCall__Inputs {
    return new EnablePublicMintingCall__Inputs(this);
  }

  get outputs(): EnablePublicMintingCall__Outputs {
    return new EnablePublicMintingCall__Outputs(this);
  }
}

export class EnablePublicMintingCall__Inputs {
  _call: EnablePublicMintingCall;

  constructor(call: EnablePublicMintingCall) {
    this._call = call;
  }
}

export class EnablePublicMintingCall__Outputs {
  _call: EnablePublicMintingCall;

  constructor(call: EnablePublicMintingCall) {
    this._call = call;
  }
}

export class RegisterReverseENSCall extends ethereum.Call {
  get inputs(): RegisterReverseENSCall__Inputs {
    return new RegisterReverseENSCall__Inputs(this);
  }

  get outputs(): RegisterReverseENSCall__Outputs {
    return new RegisterReverseENSCall__Outputs(this);
  }
}

export class RegisterReverseENSCall__Inputs {
  _call: RegisterReverseENSCall;

  constructor(call: RegisterReverseENSCall) {
    this._call = call;
  }

  get _reverseRegistrarAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterReverseENSCall__Outputs {
  _call: RegisterReverseENSCall;

  constructor(call: RegisterReverseENSCall) {
    this._call = call;
  }
}

export class RescueTokenCall extends ethereum.Call {
  get inputs(): RescueTokenCall__Inputs {
    return new RescueTokenCall__Inputs(this);
  }

  get outputs(): RescueTokenCall__Outputs {
    return new RescueTokenCall__Outputs(this);
  }
}

export class RescueTokenCall__Inputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }

  get _foreignToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RescueTokenCall__Outputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetAchievementsContractCall extends ethereum.Call {
  get inputs(): SetAchievementsContractCall__Inputs {
    return new SetAchievementsContractCall__Inputs(this);
  }

  get outputs(): SetAchievementsContractCall__Outputs {
    return new SetAchievementsContractCall__Outputs(this);
  }
}

export class SetAchievementsContractCall__Inputs {
  _call: SetAchievementsContractCall;

  constructor(call: SetAchievementsContractCall) {
    this._call = call;
  }

  get _achievementsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAchievementsContractCall__Outputs {
  _call: SetAchievementsContractCall;

  constructor(call: SetAchievementsContractCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetDataRootCall extends ethereum.Call {
  get inputs(): SetDataRootCall__Inputs {
    return new SetDataRootCall__Inputs(this);
  }

  get outputs(): SetDataRootCall__Outputs {
    return new SetDataRootCall__Outputs(this);
  }
}

export class SetDataRootCall__Inputs {
  _call: SetDataRootCall;

  constructor(call: SetDataRootCall) {
    this._call = call;
  }

  get _newDataRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetDataRootCall__Outputs {
  _call: SetDataRootCall;

  constructor(call: SetDataRootCall) {
    this._call = call;
  }
}

export class SetUpgradeMaximumCall extends ethereum.Call {
  get inputs(): SetUpgradeMaximumCall__Inputs {
    return new SetUpgradeMaximumCall__Inputs(this);
  }

  get outputs(): SetUpgradeMaximumCall__Outputs {
    return new SetUpgradeMaximumCall__Outputs(this);
  }
}

export class SetUpgradeMaximumCall__Inputs {
  _call: SetUpgradeMaximumCall;

  constructor(call: SetUpgradeMaximumCall) {
    this._call = call;
  }

  get _newUpgradeMaximum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUpgradeMaximumCall__Outputs {
  _call: SetUpgradeMaximumCall;

  constructor(call: SetUpgradeMaximumCall) {
    this._call = call;
  }
}

export class SignedTransferCall extends ethereum.Call {
  get inputs(): SignedTransferCall__Inputs {
    return new SignedTransferCall__Inputs(this);
  }

  get outputs(): SignedTransferCall__Outputs {
    return new SignedTransferCall__Outputs(this);
  }
}

export class SignedTransferCall__Inputs {
  _call: SignedTransferCall;

  constructor(call: SignedTransferCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SignedTransferCall__Outputs {
  _call: SignedTransferCall;

  constructor(call: SignedTransferCall) {
    this._call = call;
  }
}

export class SignedTransferWithMintProofCall extends ethereum.Call {
  get inputs(): SignedTransferWithMintProofCall__Inputs {
    return new SignedTransferWithMintProofCall__Inputs(this);
  }

  get outputs(): SignedTransferWithMintProofCall__Outputs {
    return new SignedTransferWithMintProofCall__Outputs(this);
  }
}

export class SignedTransferWithMintProofCall__Inputs {
  _call: SignedTransferWithMintProofCall;

  constructor(call: SignedTransferWithMintProofCall) {
    this._call = call;
  }

  get tokenData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class SignedTransferWithMintProofCall__Outputs {
  _call: SignedTransferWithMintProofCall;

  constructor(call: SignedTransferWithMintProofCall) {
    this._call = call;
  }
}

export class SignedTransferWithOperatorCall extends ethereum.Call {
  get inputs(): SignedTransferWithOperatorCall__Inputs {
    return new SignedTransferWithOperatorCall__Inputs(this);
  }

  get outputs(): SignedTransferWithOperatorCall__Outputs {
    return new SignedTransferWithOperatorCall__Outputs(this);
  }
}

export class SignedTransferWithOperatorCall__Inputs {
  _call: SignedTransferWithOperatorCall;

  constructor(call: SignedTransferWithOperatorCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SignedTransferWithOperatorCall__Outputs {
  _call: SignedTransferWithOperatorCall;

  constructor(call: SignedTransferWithOperatorCall) {
    this._call = call;
  }
}

export class SignedTransferWithOperatorAndMintProofCall extends ethereum.Call {
  get inputs(): SignedTransferWithOperatorAndMintProofCall__Inputs {
    return new SignedTransferWithOperatorAndMintProofCall__Inputs(this);
  }

  get outputs(): SignedTransferWithOperatorAndMintProofCall__Outputs {
    return new SignedTransferWithOperatorAndMintProofCall__Outputs(this);
  }
}

export class SignedTransferWithOperatorAndMintProofCall__Inputs {
  _call: SignedTransferWithOperatorAndMintProofCall;

  constructor(call: SignedTransferWithOperatorAndMintProofCall) {
    this._call = call;
  }

  get tokenData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class SignedTransferWithOperatorAndMintProofCall__Outputs {
  _call: SignedTransferWithOperatorAndMintProofCall;

  constructor(call: SignedTransferWithOperatorAndMintProofCall) {
    this._call = call;
  }
}

export class TransferCreateControlCall extends ethereum.Call {
  get inputs(): TransferCreateControlCall__Inputs {
    return new TransferCreateControlCall__Inputs(this);
  }

  get outputs(): TransferCreateControlCall__Outputs {
    return new TransferCreateControlCall__Outputs(this);
  }
}

export class TransferCreateControlCall__Inputs {
  _call: TransferCreateControlCall;

  constructor(call: TransferCreateControlCall) {
    this._call = call;
  }

  get _newCreateControl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferCreateControlCall__Outputs {
  _call: TransferCreateControlCall;

  constructor(call: TransferCreateControlCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferTokenAssignmentControlCall extends ethereum.Call {
  get inputs(): TransferTokenAssignmentControlCall__Inputs {
    return new TransferTokenAssignmentControlCall__Inputs(this);
  }

  get outputs(): TransferTokenAssignmentControlCall__Outputs {
    return new TransferTokenAssignmentControlCall__Outputs(this);
  }
}

export class TransferTokenAssignmentControlCall__Inputs {
  _call: TransferTokenAssignmentControlCall;

  constructor(call: TransferTokenAssignmentControlCall) {
    this._call = call;
  }

  get _newTokenAssignmentControl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferTokenAssignmentControlCall__Outputs {
  _call: TransferTokenAssignmentControlCall;

  constructor(call: TransferTokenAssignmentControlCall) {
    this._call = call;
  }
}

export class UpgradeStampCall extends ethereum.Call {
  get inputs(): UpgradeStampCall__Inputs {
    return new UpgradeStampCall__Inputs(this);
  }

  get outputs(): UpgradeStampCall__Outputs {
    return new UpgradeStampCall__Outputs(this);
  }
}

export class UpgradeStampCall__Inputs {
  _call: UpgradeStampCall;

  constructor(call: UpgradeStampCall) {
    this._call = call;
  }

  get _upgradeTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _helperTokenId1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _helperTokenId2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpgradeStampCall__Outputs {
  _call: UpgradeStampCall;

  constructor(call: UpgradeStampCall) {
    this._call = call;
  }
}

export class UpgradeStampWithJokerCall extends ethereum.Call {
  get inputs(): UpgradeStampWithJokerCall__Inputs {
    return new UpgradeStampWithJokerCall__Inputs(this);
  }

  get outputs(): UpgradeStampWithJokerCall__Outputs {
    return new UpgradeStampWithJokerCall__Outputs(this);
  }
}

export class UpgradeStampWithJokerCall__Inputs {
  _call: UpgradeStampWithJokerCall;

  constructor(call: UpgradeStampWithJokerCall) {
    this._call = call;
  }

  get _upgradeTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _helperTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _helperCS1TokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpgradeStampWithJokerCall__Outputs {
  _call: UpgradeStampWithJokerCall;

  constructor(call: UpgradeStampWithJokerCall) {
    this._call = call;
  }
}
